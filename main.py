from aiogram import Bot, Dispatcher, executor, types
from keyboards import main_kb
import os
from dotenv import load_dotenv
from tarot_cards import get_card_meaning

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üîÆ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ - –¢–∞—Ä–æ –≥–æ–≤–æ—Ä–∏—Ç!.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"

        "‚ùì –ß—Ç–æ —è –º–æ–≥—É:\n"
        "ü´ñ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å—É—Ç–∏ –∫–∞—Ä—Ç\n"
        "üÉè –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º\n"
        "‚ú® –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é\n\n"

        "üìå –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:\n"
        "–ë—É–¥—É –ª–∏ —è –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å –ö–∏—Ä–∏–ª–ª–æ–º?\n\n"

        "üí¨ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n"
        "1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å \n\n"

        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ—Ä–∏—Ü–∞, –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã, –°–º–µ—Ä—Ç—å",
        reply_markup=main_kb
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç, –Ω–∞–ø–∏—à–∏:\n/read –ö–∞—Ä—Ç–∞1, –ö–∞—Ä—Ç–∞2, –ö–∞—Ä—Ç–∞3")

# –ö–æ–º–∞–Ω–¥–∞ /read
@dp.message_handler(commands=['read'])
async def read_cards(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        cards_text = message.text.split(' ', 1)[1]
        cards_list = [card.strip() for card in cards_text.split(',')]

        response = "üîÆ –í–æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:\n\n"

        for card in cards_list:
            meaning = get_card_meaning(card)
            response += f"üÉè <b>{card}</b>:\n{meaning}\n\n"

        await message.reply(response, parse_mode="HTML")

    except IndexError:
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /read")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback)
@dp.callback_query_handler(lambda c: c.data in ['today', 'tarot', 'miniapp', 'about'])
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == 'today':
        await bot.send_message(callback_query.from_user.id, "üåô –ö–∞—Ä—Ç–∞ –¥–Ω—è ‚Äî ¬´–õ—É–Ω–∞¬ª. –û–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—é.")
    elif callback_query.data == 'tarot':
        kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text="üÉè –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", web_app=types.WebAppInfo(url="https://your-tarot-miniapp.vercel.app/miniapp.html"))
        )
        await bot.send_message(callback_query.from_user.id, "üëâ –û—Ç–∫—Ä–æ–π Mini App –∏ —Å–¥–µ–ª–∞–π —Å–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=kb)
    elif callback_query.data == 'about':
        await bot.send_message(callback_query.from_user.id,
            "‚òï –¢–∞—Ä–æ –≥–æ–≤–æ—Ä–∏—Ç! ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –¢–∞—Ä–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å —É—é—Ç–æ–º.\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –¥–µ–ª–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã, —É—á–∏–º—Å—è —á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "–ë—É–¥—å –∫–∞–∫ –¥–æ–º–∞, –≥–∞–¥–∞–π —Å —á–∞—à–∫–æ–π —á–∞—è –≤ —Ä—É–∫–∞—Ö."
        )
    elif callback_query.data == 'miniapp':
        kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text="üÉè –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", web_app=types.WebAppInfo(url="https://your-tarot-miniapp.vercel.app/miniapp.html"))
        )
        await bot.send_message(callback_query.from_user.id, "üëâ –í–æ—Ç –≤–∞—à –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)